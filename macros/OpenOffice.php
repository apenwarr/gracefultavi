<?php

class Macro_OpenOffice
{
    var $toolbarButton = '';

    var $enable = false;

    function Macro_OpenOffice()
    {
        global $EnableOpenOfficeMacro;
        global $OpenOfficeMacroZipCmd, $OpenOfficeMacroUnzipCmd;
        if ($EnableOpenOfficeMacro &&
            $OpenOfficeMacroZipCmd && $OpenOfficeMacroUnzipCmd)
        {
            $this->enable = true;

            // This macro is meant to be executed directly from the url. To
            // work properly, it must set itself as a toolbar button, but not
            // until the macro is enabled.
            $this->toolbarButton = 'Save as OpenOffice';
        }
    }

    function parse($args, $page)
    {
        global $action, $OdtParseEngine, $odtUrlImages;
        global $OpenOfficeMacroUnzipCmd, $OpenOfficeMacroZipCmd, $pagestore;
        global $parseOdtTableStyle, $ScriptBase, $ScriptName, $TempDir;
        global $UserName, $WorkingDirectory;

        if ($action != 'macro') {
            return;
        }

        if (!$this->enable) {
            die('Save as OpenOffice Error: This feature has not yet been '.
                'enabled by the administrator.');
        }

        require('parse/main.php');
        require('parse/openofficeparse.php');

        # read page
        $pg = $pagestore->page($page);
        $pg->read();

        # creates temporary directory
        $uniqueDir = uniqid($page);
        $dir = $TempDir . '/' . $uniqueDir;
        if (!mkdir($dir)) {
            die('Save as OpenOffice Error: Failed to create temporary '.
                'directory.');
        }

        # unzip template file
        if (!file_exists("$WorkingDirectory/template/OpenOffice.odt")) {
            $this->tempFileCleanup($dir);
            die('Save as OpenOffice Error: Missing OpenOffice.odt template '.
                'file.');
        }
        exec("cd $dir; $OpenOfficeMacroUnzipCmd $WorkingDirectory/template/OpenOffice.odt;");
        if (!file_exists($dir.'/meta.xml') ||
            !file_exists($dir.'/content.xml'))
        {
            $this->tempFileCleanup($dir);
            die('Save as OpenOffice Error: Missing meta.xml or content.xml '.
                'files from unzipped template.');
        }

        # meta.xml
        $content = file_get_contents($dir.'/meta.xml');
        $content = str_replace('<meta:initial-creator>', '<meta:initial-creator>'.$UserName, $content);
        $content = str_replace('<dc:creator>', '<dc:creator>'.$UserName, $content);
        $content = str_replace('<meta:creation-date>', '<meta:creation-date>'.date('Y-m-dTG:i:s'), $content);
        $content = str_replace('<dc:date>', '<dc:date>'.date('Y-m-dTG:i:s'), $content);
        $content = str_replace('<dc:title>', '<dc:title>'.$page, $content);
        $content = str_replace('<meta:generator>', '<meta:generator>GracefulTavi '.GRACEFULTAVI_VERSION, $content);
        $description = "Generated by GracefulTavi ".GRACEFULTAVI_VERSION." on ".date('F j, Y')."\n".
                       "From: $ScriptBase?$page\n".
                       "Revision number: ".$pg->version."\n\n".
                       "About GracefulTavi: http://open.nit.ca/wiki/?GracefulTavi\n";
        $content = str_replace('<dc:description>', '<dc:description>'.$description, $content);

        if ($handle = fopen($dir.'/meta.xml', 'w')) {
            $fw = fwrite($handle, $content);
        }
        if (($handle === false) || ($fw === false) || ($fw == 0)) {
            $this->tempFileCleanup($dir);
            die('Save as OpenOffice Error: Failed to update meta.xml.');
        }
        fclose($handle);

        # content.xml
        $text = utf8_encode(html_entity_decode("=```$page```=\n\n".$pg->text));
        $odtUrlImages = array();
        $text = parseText($text, $OdtParseEngine, $page);
        $text = preg_replace('/\n/', '', $text);
        // document body
        $content = file_get_contents($dir.'/content.xml');
        $content = str_replace('<text:p text:style-name="Standard"/>',
            '<text:p text:style-name="Standard">'.$text.'</text:p>',
            $content);
        // table styles
        if ($parseOdtTableStyle) {
            $content = str_replace('</office:automatic-styles>',
                $parseOdtTableStyle.'</office:automatic-styles>',
                $content);
        }

        // cleanup
        // paragraph
        $content = preg_replace(
            '/<text:p text:style-name="(\w+)"><\/text:p>/',
            '<text:p text:style-name="\\1"/>',
            $content);
        $content = preg_replace(
            '/(<text:p text:style-name="(\w+)"\/>)+/',
            '\\1',
            $content);
        // remove empty lines at top and bottom of document
        $content = preg_replace(
            '/<\/text:sequence-decls><text:p text:style-name="(\w+)"\/>/',
            '</text:sequence-decls>',
            $content);
        $content = preg_replace(
            '/<text:p text:style-name="(\w+)"\/><\/office:text>/',
            '</office:text>',
            $content);
        // indents mess
        $content = preg_replace(
            '/<\/text:list><text:p text:style-name="\w+"\/><\/text:list-item>/',
            '</text:list></text:list-item>',
            $content);
        $content = str_replace(
            '</text:list-item></text:p><text:p text:style-name="Standard">'.
            '<text:list-item>',
            '</text:list-item><text:p text:style-name="Standard"/>'.
            '<text:list-item>',
            $content);

        if ($handle = fopen($dir.'/content.xml', 'w')) {
            $fw = fwrite($handle, $content);
        }
        if (($handle === false) || ($fw === false) || ($fw == 0)) {
            $this->tempFileCleanup($dir);
            die('Save as OpenOffice Error: Failed to update content.xml.');
        }
        fclose($handle);

        # images handling
        foreach ($odtUrlImages as $img) {
            if (file_exists($img)) {
                $newName = $dir.'/Pictures/'.substr(basename($img), 32);
                if (!@rename($img, $newName)) {
                    $this->tempFileCleanup($dir);
                    die('Save as OpenOffice Error: Failed to move an image in '.
                        'Pictures directory.');
                }
            }
        }

        # assemble and sends document
        exec("cd $dir; $OpenOfficeMacroZipCmd -r $page.odt *;");
        if (!file_exists("$dir/$page.odt")) {
            $this->tempFileCleanup($dir);
            die('Save as OpenOffice Error: Failed assembling final .odt file.');
        }
        header('Content-Type: application/vnd.oasis.opendocument.text; '.
               'name="'.$page.'.odt"');
        header('Content-Disposition: attachment; filename="'.$page.'.odt"');
        print file_get_contents("$dir/$page.odt");

        # cleanup
        $this->rmDirAll($dir);

        exit;
    }

    function tempFileCleanup($dir)
    {
        global $odtUrlImages;
        foreach ($odtUrlImages as $img) {
            @unlink($img);
        }

        $this->rmDirAll($dir);
    }

    function rmDirAll($dir)
    {
        if (!is_dir($dir)) { return; }
        $dirs = array($dir);
        while ($dir = array_pop($dirs)) {
            if (@rmdir($dir)) { continue; }
            $dirs[] = $dir;
            // get subdirs of current dir
            $subdirs = array();
            $dh = opendir($dir);
            while ($subdir = readdir($dh)) {
                if (!in_array($subdir, array('.', '..'))) {
                    $subdirs[] = $subdir;
                }
            }
            // then for each of them, remove files and keep directories for
            // next iterations
            foreach ($subdirs as $subdir) {
                $subdir = $dir . DIRECTORY_SEPARATOR . $subdir;
                if (is_dir($subdir)) {
                    $dirs[] = $subdir;
                } else {
                    unlink($subdir);
                }
            }
        }
    }
}

return 1;

?>
